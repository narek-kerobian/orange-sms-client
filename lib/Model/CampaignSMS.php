<?php
/**
 * CampaignSMS
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Messaging-Pro_API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0_inProgress
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CampaignSMS Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignSMS implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignSMS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'campaign_title' => 'string',
        'project_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'campaign_title' => null,
        'project_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_title' => 'campaignTitle',
        'project_name' => 'projectName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_title' => 'setCampaignTitle',
        'project_name' => 'setProjectName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_title' => 'getCampaignTitle',
        'project_name' => 'getProjectName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_title'] = isset($data['campaign_title']) ? $data['campaign_title'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['campaign_title'] === null) {
            $invalidProperties[] = "'campaign_title' can't be null";
        }
        if ((mb_strlen($this->container['campaign_title']) > 255)) {
            $invalidProperties[] = "invalid value for 'campaign_title', the character length must be smaller than or equal to 255.";
        }

        if (!preg_match("/^[a-z\\s]{0,255}$/i", $this->container['campaign_title'])) {
            $invalidProperties[] = "invalid value for 'campaign_title', must be conform to the pattern /^[a-z\\s]{0,255}$/i.";
        }

        if ($this->container['project_name'] === null) {
            $invalidProperties[] = "'project_name' can't be null";
        }
        if ((mb_strlen($this->container['project_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'project_name', the character length must be smaller than or equal to 255.";
        }

        if (!preg_match("/^[a-z\\s]{0,255}$/i", $this->container['project_name'])) {
            $invalidProperties[] = "invalid value for 'project_name', must be conform to the pattern /^[a-z\\s]{0,255}$/i.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_title
     *
     * @return string
     */
    public function getCampaignTitle()
    {
        return $this->container['campaign_title'];
    }

    /**
     * Sets campaign_title
     *
     * @param string $campaign_title 
     *
     * @return $this
     */
    public function setCampaignTitle($campaign_title)
    {
        if ((mb_strlen($campaign_title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $campaign_title when calling CampaignSMS., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[a-z\\s]{0,255}$/i", $campaign_title))) {
            throw new \InvalidArgumentException("invalid value for $campaign_title when calling CampaignSMS., must conform to the pattern /^[a-z\\s]{0,255}$/i.");
        }

        $this->container['campaign_title'] = $campaign_title;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name 
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        if ((mb_strlen($project_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $project_name when calling CampaignSMS., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[a-z\\s]{0,255}$/i", $project_name))) {
            throw new \InvalidArgumentException("invalid value for $project_name when calling CampaignSMS., must conform to the pattern /^[a-z\\s]{0,255}$/i.");
        }

        $this->container['project_name'] = $project_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


